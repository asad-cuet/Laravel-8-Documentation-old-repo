Note:All this can be use in model too.
formate=:$student=Model-name::get();

requirement:
        use Illuminate\Support\Facades\DB;  //at controller

read query:
        $student=Model-name::get();     //this is for model
        $student=DB::table('student')->get();    
        $student=DB::table('student')->select('col','col','col')->get();
        $student=DB::table('student')->orderBy('Id')->get();   //Ascending default
        $student=DB::table('student')->orderBy('Id','desc')->get();   //Descending
        $activity=Activity::orderBy('id','desc')->take(10)->get();     //take only 10 data
        

        return view('student',['students'=>$student]);   //passing
        

         //recieving and printing
         @foreach($students as $stu)  
         {{$stu->Id}}
         {{$stu->Name}}
         {{$stu->Email}}
         {{$stu->City}}
         {{$stu->Passing_date}}
         <br>
        @endforeach   


Condition read where method:
         $student=DB::table('students')->find($id);
         $student=DB::table('student')->where('Id','=','1')->get();         
         $student=DB::table('student')->where('Name','like','Asad%')->get();   
         $student=DB::table('student')->where('Name','like','zz%')->orWhere('Email','like','asad%')->get();  
         $student=DB::table('student')->whereBetween('Id',[1,3])->get();   // query 1 to 3 id    
         $student=DB::table('student')->whereBetween('Id',[1,3])->orWhereBetween('Id',[5,6])->get();   // query 1 to 3 id
         $student=DB::table('student')->where('Id','=','1')->first(); //collect only first row ---first method
         
         return view('student',['stu'=>$student]);
         
         {{$stu->Id}}   //printing
         {{$stu->Name}}
         {{$stu->Email}}
         {{$stu->City}}
         {{$stu->Passing_date}} 
         
Condition read value method:
          $student=DB::table('student')->where('Id','=','1')->value('email');
          dd($student);// will stop here
          return view('student',['stu'=>$student]);   
          

Condition read find method:
         $student=DB::table('student')->where('Id','=','1')->find('email');
         dd($student);// will stop here
         return view('student',['stu'=>$student]);   
         
         
Condition read pluck method:
         $student=DB::table('student')->pluck('City','Name');
         dd($student);// will stop here
         return view('student',['stu'=>$student]);






Condition read chunk method:
         DB::table('student')->orderBy('id')->chunk(5,function($student)
                                                                       {
                                                                             echo "Chunk of data<br>";
                                                                             foreach($student as $stu)
                                                                             {
                                                                                 echo $stu->Name;
                                                                                 echo "<br>";
                                                                             }
                                                                              // return false;  //stop loop
                                                                       }
                                                            );

Condition read count method:
         $student=DB::table('student')->count(); // count row number
         dd($student);// will stop here   
         
         

Condition read max,min method:
         $student=DB::table('student')->max('id'); //last id
         $student=DB::table('student')->min('id');  //first id



Condition read exists method:
         $student=DB::table('student')->where('id','=','1')->exists();
         if($student=DB::table('student')->where('id','=','2')->exists())
        {
            dd("Yes,Exist");
        } else dd("Not Exist");

        if($student=DB::table('student')->where('id','=','1')->doesntExist())
        {
            dd("Not Exist");
        } else dd("Yes Exist");



Condition read select method:
        $student=DB::table('student')->select('Name','Email')->get(); //first id






Condition read latest oldest method:
        $student=DB::table('student')->latest('Id')->get();   
        $student=DB::table('student')->oldest('Id')->get();   



Insert query:
        $student=DB::table('student')->insert(['Name'=>'Hamzah','Email'=>'test','City'=>'Dhaka','Passing_date'=>'2020']); // Single data
        $student=DB::table('student')->insertOrIgnore(['Name'=>'Hamzah','Email'=>'test','City'=>'Dhaka','Passing_date'=>'2020']); // won't query if something wrong
        $student=DB::table('student')->insertGetId(['Name'=>'Hamzah','Email'=>'test','City'=>'Dhaka','Passing_date'=>'2020']); // will return id value
        $student=DB::table('student')->insert([['Name'=>'Hamzah','Email'=>'test','City'=>'Dhaka','Passing_date'=>'2020'],['Name'=>'Shanto','Email'=>'test','City'=>'Dhaka','Passing_date'=>'2029']]); // multiple data
            

       //also with backend validate data:

         $valideteData=$req->validate([        //   @error('col') {{$message}}  @enderror
             'name'=>'required',
             'email'=>'required|email',
             'phone'=>'required|max:13',
             'description'=>'required|max:50',
         ]);
         DB::table('name')->insert($valideteData);    
    or,  Model-name::insert($valideteData);



Update query:
        $update=DB::table('student')->where('id','3')->update(['Name'=>'Upadted','Email'=>'testupdate','City'=>'Dhaka','Passing_date'=>'2020']);
        $update=DB::table('student')->updateOrInsert(['Name'=>'Upadted'],['Email'=>'search7733','City'=>'Savar']); //if found,then update
        $update=DB::table('student')->where('id','3')->update($validateData);




Delete query:
        $delete=DB::table('student')->where('id','3')->delete(); 
        $update_all=DB::table('student')->truncate(); //delete all rows of this table 



Left Join:

        $verified_purchase=Order::where('orders.user_id',Auth::id())
                                        ->join('order_items','orders.id','order_items.order_id')
                                        ->where('order_items.prod_id',$product_id)->get();